# Advanced NGINX Configuration for CDN Proxy
# This demonstrates production-ready features including caching, rate limiting, 
# load balancing, security headers, monitoring, and more

# Events block with performance optimizations
events {
    # Maximum number of simultaneous connections per worker process
    worker_connections 2048;
    # Use efficient connection method on Linux
    use epoll;
    # Accept multiple connections at once for better performance
    multi_accept on;
}

# Main HTTP configuration block
http {
    # ================================
    # BASIC SETTINGS & PERFORMANCE
    # ================================
    
    # Optimize file sending
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    
    # Hash table sizes
    types_hash_max_size 2048;
    server_names_hash_bucket_size 64;
    
    # Hide nginx version for security
    server_tokens off;
    
    # Include MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # ================================
    # LOGGING CONFIGURATION
    # ================================
    
    # Custom log format with detailed information
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'cache:$upstream_cache_status rt:$request_time '
                    'upstream:$upstream_response_time';
    
    # Enhanced log format for debugging
    log_format debug '$time_local - $remote_addr - $request - $status - '
                     'cache:$upstream_cache_status - rt:$request_time - '
                     'uct:$upstream_connect_time - urt:$upstream_response_time - '
                     'uaddr:$upstream_addr - "$http_user_agent"';
    
    # ================================
    # DNS RESOLVER CONFIGURATION
    # ================================
    
    # Multiple DNS servers with IPv6 support and shorter timeout
    resolver 8.8.8.8 8.8.4.4 1.1.1.1 [2001:4860:4860::8888] valid=300s;
    resolver_timeout 5s;
    
    # ================================
    # COMPRESSION SETTINGS
    # ================================
    
    # Enable gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        text/json
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        application/rdf+xml
        image/svg+xml;
    
    # Disable gzip for IE6
    gzip_disable "msie6";
    
    # ================================
    # RATE LIMITING ZONES
    # ================================
    
    # Different rate limits for different endpoints
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=datafiles:10m rate=30r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=50r/s;
    limit_req_zone $binary_remote_addr zone=health:1m rate=1r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    
    # ================================
    # CACHE CONFIGURATION
    # ================================
    
    # Cache for CDN content with different zones for different content types
    proxy_cache_path /var/cache/nginx/cdn 
                     levels=1:2 
                     keys_zone=cdn_cache:100m 
                     max_size=2g 
                     inactive=24h 
                     use_temp_path=off
                     loader_threshold=300
                     loader_files=200;
    
    # Cache for static assets
    proxy_cache_path /var/cache/nginx/static
                     levels=1:2
                     keys_zone=static_cache:50m
                     max_size=1g
                     inactive=7d
                     use_temp_path=off;
    
    # Default cache settings
    proxy_cache_lock on;
    proxy_cache_lock_timeout 5s;
    proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
    
    # ================================
    # UPSTREAM CONFIGURATION
    # ================================
    
    # Optimizely CDN with load balancing and health checks
    upstream optimizely_cdn {
        # Primary CDN servers (using real domains)
        server cdn.optimizely.com:443 max_fails=3 fail_timeout=30s weight=3;
        # Note: Add more real CDN endpoints here if available
        
        # Connection pooling
        keepalive 32;
        keepalive_requests 1000;
        keepalive_timeout 60s;
    }
    
    # Google services upstream
    upstream google_services {
        server www.google.com:443 max_fails=2 fail_timeout=10s;
        keepalive 16;
    }
    
    # ================================
    # SECURITY MAP DEFINITIONS
    # ================================
    
    # Map to block bad user agents
    map $http_user_agent $blocked_agent {
        default 0;
        ~*malicious 1;
        ~*bot 1;
        ~*crawler 1;
        ~*spider 1;
    }
    
    # Map for allowed origins (for stricter CORS)
    map $http_origin $cors_origin {
        default "";
        ~^https?://(localhost|127\.0\.0\.1)(:\d+)?$ $http_origin;
        ~^https?://.*\.yourdomain\.com$ $http_origin;
        ~^https?://yourdomain\.com$ $http_origin;
    }
    
    # ================================
    # MAIN SERVER BLOCK
    # ================================
    
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name localhost cdn-proxy.local;
        
        # Connection limits
        limit_conn conn_limit_per_ip 20;
        
        # ================================
        # SECURITY HEADERS
        # ================================
        
        # Security headers applied to all responses
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header X-Robots-Tag "noindex, nofollow" always;
        add_header X-Permitted-Cross-Domain-Policies "none" always;
        
        # Content Security Policy (adjust as needed)
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:;" always;
        
        # ================================
        # LOGGING CONFIGURATION
        # ================================
        
        # Enhanced logging with different levels
        error_log /var/log/nginx/error.log warn;
        access_log /var/log/nginx/access.log main;
        
        # ================================
        # RATE LIMITING
        # ================================
        
        # General rate limiting for all requests
        limit_req zone=general burst=100 nodelay;
        
        # ================================
        # MONITORING & HEALTH ENDPOINTS
        # ================================
        
        # Health check endpoint for load balancers
        location /health {
            limit_req zone=health burst=5 nodelay;
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }
        
        # Detailed status endpoint
        location /api/status {
            limit_req zone=api burst=5 nodelay;
            access_log off;
            
            # Return JSON status with timestamp
            return 200 '{
                "status": "ok",
                "service": "cdn-proxy",
                "version": "2.0.0",
                "timestamp": "$time_iso8601",
                "uptime": "nginx uptime",
                "features": ["caching", "rate-limiting", "load-balancing", "cors", "security-headers"]
            }';
            
            add_header Content-Type application/json;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }
        
        # Cache statistics endpoint (requires nginx-module-vts or similar for detailed stats)
        location /api/cache-stats {
            limit_req zone=api burst=3 nodelay;
            access_log off;
            
            return 200 '{
                "cache_zones": {
                    "cdn_cache": {"path": "/var/cache/nginx/cdn", "max_size": "2g"},
                    "static_cache": {"path": "/var/cache/nginx/static", "max_size": "1g"}
                },
                "note": "Install nginx-module-vts for detailed statistics"
            }';
            
            add_header Content-Type application/json;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }
        
        # ================================
        # SECURITY BLOCKING
        # ================================
        
        # Block bad user agents
        if ($blocked_agent) {
            return 403 "Forbidden";
        }
        
        # Block requests without proper Host header
        if ($host !~ ^(localhost|cdn-proxy\.local|127\.0\.0\.1)$) {
            return 444;
        }
        
        # ================================
        # ENHANCED GOOGLE PROXY
        # ================================
        
        location /redirect-to-google {
            # Rate limiting for external requests
            limit_req zone=api burst=10 nodelay;
            
            # Cache configuration
            proxy_cache cdn_cache;
            proxy_cache_valid 200 302 5m;
            proxy_cache_valid 404 1m;
            proxy_cache_key "$scheme$proxy_host$request_uri$http_accept_language";
            
            # Enhanced proxy settings
            proxy_pass https://google_services;
            proxy_ssl_verify off;
            proxy_ssl_server_name on;
            
            # Proxy headers
            proxy_set_header Host www.google.com;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header User-Agent "CDN-Proxy/2.0 ($http_user_agent)";
            proxy_set_header Accept-Encoding gzip;
            
            # Timeouts and buffering
            proxy_connect_timeout 10s;
            proxy_send_timeout 10s;
            proxy_read_timeout 30s;
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 8 8k;
            proxy_busy_buffers_size 16k;
            
            # Custom headers
            add_header X-Cache-Status $upstream_cache_status always;
            add_header X-Response-Time $request_time always;
            add_header X-Upstream-Addr $upstream_addr always;
        }
        
        # ================================
        # ADVANCED OPTIMIZELY CDN PROXY
        # ================================
        
        location /datafiles/ {
            # Specific rate limiting for API calls
            limit_req zone=datafiles burst=50 nodelay;
            
            # Don't forward request body for GET requests
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            
            # Advanced caching configuration
            proxy_cache cdn_cache;
            proxy_cache_valid 200 30m;
            proxy_cache_valid 404 5m;
            proxy_cache_valid 301 302 10m;
            proxy_cache_valid any 1m;
            
            # Cache control
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_lock on;
            proxy_cache_lock_timeout 10s;
            proxy_cache_revalidate on;
            
            # Cache key includes important headers
            proxy_cache_key "$scheme$proxy_host$request_uri$http_if_modified_since$http_if_none_match";
            
            # Cache bypass conditions
            proxy_cache_bypass $http_cache_control $http_pragma $http_authorization;
            proxy_no_cache $http_pragma $http_authorization;
            
            # Proxy to upstream with SSL verification
            proxy_pass https://optimizely_cdn/datafiles/;
            proxy_ssl_verify off;
            proxy_ssl_server_name on;
            
            # Enhanced proxy headers
            proxy_set_header Host cdn.optimizely.com;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header User-Agent "CDN-Proxy/2.0 (nginx)";
            proxy_set_header Accept-Encoding gzip;
            
            # Conditional headers
            proxy_set_header If-Modified-Since $http_if_modified_since;
            proxy_set_header If-None-Match $http_if_none_match;
            
            # Timeouts and buffering optimization
            proxy_connect_timeout 15s;
            proxy_send_timeout 15s;
            proxy_read_timeout 60s;
            proxy_buffering on;
            proxy_buffer_size 16k;
            proxy_buffers 16 16k;
            proxy_busy_buffers_size 32k;
            
            # Enhanced CORS headers with origin validation
            add_header 'Access-Control-Allow-Origin' '*' always;
            # Alternative stricter CORS: add_header 'Access-Control-Allow-Origin' $cors_origin always;
            
            add_header 'Access-Control-Allow-Methods' 'GET,OPTIONS,HEAD' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Accept,Accept-Language' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,Content-Type,Date,Server,X-Cache-Status,X-Response-Time,ETag,Last-Modified' always;
            add_header 'Access-Control-Max-Age' '86400' always;
            add_header 'Access-Control-Allow-Credentials' 'false' always;
            
            # Performance and debugging headers
            add_header X-Cache-Status $upstream_cache_status always;
            add_header X-Cache-Key $scheme$proxy_host$request_uri always;
            add_header X-Response-Time $request_time always;
            add_header X-Upstream-Response-Time $upstream_response_time always;
            add_header X-Upstream-Addr $upstream_addr always;
            add_header X-Proxy-Cache-Date $upstream_http_date always;
            
            # Handle CORS preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET,OPTIONS,HEAD' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Accept,Accept-Language' always;
                add_header 'Access-Control-Max-Age' '86400' always;
                add_header 'Content-Type' 'text/plain; charset=utf-8' always;
                add_header 'Content-Length' '0' always;
                return 204;
            }
            
            # Error handling
            proxy_intercept_errors on;
            error_page 502 503 504 = @fallback;
        }
        
        # ================================
        # FALLBACK FOR CDN FAILURES
        # ================================
        
        location @fallback {
            return 503 '{"error": "CDN temporarily unavailable", "retry_after": 30}';
            add_header Content-Type application/json always;
            add_header Retry-After 30 always;
        }
        
        # ================================
        # STATIC FILE SERVING
        # ================================
        
        # Root location for static files
        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
            
            # Security for static files
            location ~* \.(txt|log)$ {
                deny all;
            }
            
            # Optimized caching for different file types
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|webp|woff|woff2|ttf|eot|otf)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header Vary "Accept-Encoding";
                
                # Use static cache
                proxy_cache static_cache;
                proxy_cache_valid 200 1y;
                
                # Compression
                gzip_static on;
                
                # Security headers for assets
                add_header X-Content-Type-Options "nosniff" always;
            }
            
            # HTML files with shorter cache
            location ~* \.(html|htm)$ {
                expires 1h;
                add_header Cache-Control "public, must-revalidate";
                add_header Vary "Accept-Encoding";
            }
            
            # Try files with fallback
            try_files $uri $uri/ @fallback_static;
        }
        
        # Fallback for missing static files
        location @fallback_static {
            return 404 '{"error": "File not found"}';
            add_header Content-Type application/json always;
        }
        
        # ================================
        # ERROR PAGES
        # ================================
        
        # Custom error pages
        error_page 400 /errors/400.html;
        error_page 401 /errors/401.html;
        error_page 403 /errors/403.html;
        error_page 404 /errors/404.html;
        error_page 429 /errors/429.html;
        error_page 500 502 503 504 /errors/50x.html;
        
        location ^~ /errors/ {
            internal;
            root /usr/share/nginx/html;
        }
        
        # ================================
        # ADMIN/DEBUGGING ENDPOINTS
        # ================================
        
        # Nginx configuration test (only in debug mode)
        location /admin/config-test {
            limit_req zone=api burst=2 nodelay;
            access_log off;
            
            # Only allow from localhost
            allow 127.0.0.1;
            allow ::1;
            deny all;
            
            return 200 "Configuration OK - Advanced CDN Proxy Running";
            add_header Content-Type text/plain;
        }
        
        # Purge cache endpoint (implement with proper authentication in production)
        location /admin/purge-cache {
            limit_req zone=api burst=1 nodelay;
            
            # Only allow from localhost
            allow 127.0.0.1;
            allow ::1;
            deny all;
            
            # This would require nginx-cache-purge module
            # proxy_cache_purge cdn_cache $scheme$proxy_host$request_uri;
            
            return 200 '{"message": "Cache purge requested", "note": "Install nginx-cache-purge module for full functionality"}';
            add_header Content-Type application/json;
        }
    }
    
    # ================================
    # ADDITIONAL SERVER BLOCKS
    # ================================
    
    # Catch-all server for invalid hosts
    server {
        listen 80;
        server_name _;
        return 444;
    }
}
